@startuml

package core {
    package behaviors {
        class Behavior {
            +setup(attachedOn: GameObject): void
            +detach(from: GameObject): void
            +tick(deltaTime: number): void
            #onEnable(): void
            #onDisable(): void
        }

        class OutputBehavior {
            +setup(attachedOn: GameObject): void
            +observe<T extends LogicBehavior<U>, U>(BehaviorClass: ConstructorObject, observer: (data: U) => void): void
            +get transform(): Transform
        }

        class LogicBehavior<T> {
            +onDataChanged: Event<T>
            +setup(attachedOn: GameObject): void
            +notifyDataChanged(): void
        }

        class InputBehavior {
            +setup(attachedOn: GameObject): void
            +getLogicBehavior<T extends LogicBehavior<any>>(BehaviorClass: ConstructorObject
        }
    }

    class GameObject {
        +transform: Transform
        +onBehaviorListChanged: Event<void>
        +onBehaviorAdded: Event<Behavior>
        +onBehaviorRemoved: Event<Behavior>
        +onChildAdded: Event<GameObject>
        +onChildRemoved: Event<GameObject>
        +name: string
        +addChild(gameObject: GameObject): void
        +removeChild(gameObject: GameObject): void
        +addBehavior(behavior: Behavior): void
        +removeBehavior(behavior: Behavior): void
        +getFirstBehavior<T extends Behavior>(BehaviorClass: ConstructorObject
        +getBehaviors<T extends Behavior>(BehaviorClass: ConstructorObject): T[]
        +getAllBehaviors(): Behavior[]
        +getAllChildren(): GameObject[]
        +get parent(): GameObject | null
    }

    class GameEngineComponent {
        +onAttachedTo(gameEngine: GameEngineWindow): void
    }

    class GameEngineWindow {
        +get root(): GameObject
        +addGameComponent(component: GameEngineComponent): void
        +getEngineComponent<T extends GameEngineComponent>(componentClass: ConstructorObject
    }

    package tickers {
        class Ticker {
            +onTick: Event<number>
        }

        class FixedTimeTicker {
            +onTick: Event<number>
            +onFrame(timestamp: number): void
        }

        class AnimationFrameTimeTicker {
            +onTick: Event<number>
            +onFrame(timestamp: number): void
        }
    }

    package mathStructures {
        class Transform {
            +position: Vector3
            +rotation: Quaternion
            +scale: Vector3
            +get worldPosition(): Vector3
            +get worldRotation(): Quaternion
            +get worldScale(): Vector3
            +get forward(): Vector3
            +get right(): Vector3
            +get top(): Vector3
        }

        class Vector3 {
            +x: number
            +y: number
            +z: number
            +length: number
            +dotProduct(vector: Vector3): number
            +crossProduct(vector: Vector3): Vector3
            +angleBetween(vector: Vector3): number
            +add(vector: Vector3): Vector3
            +sub(vector: Vector3): Vector3
            +scale(scalar: number): Vector3
            +scaleAxis(vector: Vector3): Vector3
            +normalize(): Vector3
            +clone(): Vector3
            +rotate(quaternion: Quaternion): Vector3
            +toVector2(): Vector2
            +setFromVector2(vector: Vector2): Vector3
            +setFromVector3(vector: Vector3): void
            +set(x: number, y: number, z: number): Vector3
            +static zero(): Vector3
            +static up(): Vector3
            +static forward(): Vector3
            +static right(): Vector3
        }

        class Vector2 {
            +x: number
            +y: number
            +length: number
            +dotProduct(vector: Vector2): number
            +angleBetween(vector: Vector2): number
            +add(vector: Vector2): Vector2
            +sub(vector: Vector2): Vector2
            +rotate(angle: number): Vector2
            +scale(scalar: number): Vector2
            +scaleAxis(vector: Vector2): Vector2
            +normalize(): Vector2
            +clone(): Vector2
            +toVector3(z: number): Vector3
            +static zero(): Vector2
        }

        class Quaternion {
            +w: number
            +x: number
            +y: number
            +z: number
            +normalize(): Quaternion
            +toEulerAngles(order: EulerOrder): Vector3
            +setFromVectorEulerAngles(vector3: Vector3, order: EulerOrder): Quaternion
            +setFromEulerAngles(pitch: number, yaw: number, roll: number, order: EulerOrder): Quaternion
            +rotate(q: Quaternion): Quaternion
            +multiply(q: Quaternion): Quaternion
            +lerp(q1: Quaternion, q2: Quaternion, t: number): Quaternion
            +clone(): Quaternion
            +setFromQuaternion(q: Quaternion): Quaternion
            +set(w: number, x: number, y: number, z: number): Quaternion
            +static fromAxisAngle(axis: Vector3, angle: number): Quaternion
            +rotateAroundAxis(axis: Vector3, angle: number): Quaternion
            +static identity(): Quaternion
            +static fromEulerAngles(pitch: number, yaw: number, roll: number, order: EulerOrder): Quaternion
            +static fromVectorEulerAngles(vector3: Vector3, order: EulerOrder): Quaternion
        }

        class MathUtility {
            +static degToRad(degrees: number): number
            +static radToDeg(radians: number): number
        }
    }

    package eventSystem {
        class Event<T> {
            +addObserver(observer: (data: T) => void): void
            +removeObserver(observer: (data: T) => void): void
            +emit(data: T): void
        }
    }
    package extensions {
        class Sprunk {
            +static newGame(canvasToDrawOn: HTMLCanvasElement | null, debugMode: boolean, componentsToEnable: ComponentName[]): GameEngineWindow
        }
    }
}


' Relationships
Behavior <|-- OutputBehavior
Behavior <|-- LogicBehavior
Behavior <|-- InputBehavior

OutputBehavior --> GameObject
LogicBehavior --> GameObject
InputBehavior --> GameObject

GameObject --> Transform
GameObject --> Behavior
GameObject --> GameEngineWindow

GameEngineComponent <|-- GameEngineWindow
GameEngineComponent --> GameEngineWindow

Ticker <|-- FixedTimeTicker
Ticker <|-- AnimationFrameTimeTicker

Transform --> Vector3
Transform --> Quaternion

Vector3 --> Vector2
Quaternion --> Vector3

Event <-- LogicBehavior
Event <-- Ticker

@enduml